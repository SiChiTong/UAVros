<launch>
	<!-- 启动PX4中的SITL功能 -->
	<!-- 这里的环境变量将传递到rcS启动脚本中-->
	<!-- 模型选择 -->
	<env name="PX4_SIM_MODEL" value="solo" />
	<!-- 估计器参数选择 可选ekf2_vision和ekf2_gps-->
	<!-- 参看 ~/Firmware_v110/ROMFS/px4fmu_common/init.d-posix/rcS 中的修改内容 -->
	<!-- ekf2_gps 使用GPS作为定位来源， ekf2_vision 使用外部输入（gazebo真值、slam等）作为定位来源-->
    <env name="PX4_ESTIMATOR" value="ekf2_vision" />
	<!-- 仿真速度因子 1.0代表与真实时间同步，大于1加快仿真速度，小于1则减慢 （电脑性能较差，可选择减小该参数）-->
	<env name="PX4_SIM_SPEED_FACTOR" value="1.0" />
	
	
	<!-- PX4 configs -->
    <arg name="interactive" default="true"/>
    <!-- PX4 SITL -->
    <arg unless="$(arg interactive)" name="px4_command_arg1" value="-d"/>
    <arg     if="$(arg interactive)" name="px4_command_arg1" value=""/>
    <!-- <node name="sitl" pkg="px4" type="px4" output="screen" args="$(find px4)/ROMFS/px4fmu_common -s etc/init.d-posix/rcS $(arg px4_command_arg1)" required="true"/> -->
    <node name="sitl" pkg="px4" type="px4" output="screen" args="$(find px4)/ROMFS/px4fmu_common -s etc/init.d-posix/rcS $(arg px4_command_arg1)"/>

	<!-- 启动Gazebo -->
	<!-- Gazebo configs -->
    <arg name="gui" default="true"/>
    <arg name="world" default="$(find uavros_gazebo)/worlds/empty.world"/>
    <!-- Gazebo sim -->
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <arg name="gui" value="$(arg gui)"/>
        <arg name="world_name" value="$(arg world)"/>
    </include>

	<!-- Spawn vehicle model -->
	<!-- https://github.com/ros-simulation/gazebo_ros_pkgs/blob/kinetic-devel/gazebo_ros/scripts/spawn_model -->
    <arg name="x" default="1.0"/>
    <arg name="y" default="1.0"/>
    <arg name="z" default="0.1"/>
    <arg name="R" default="0"/>
    <arg name="P" default="0"/>
    <arg name="Y" default="0.0"/>
	<arg name="sdf" default="$(find uavros_gazebo)/models/P300_basic/P300_basic.sdf"/>
	<arg name="model" default="P300_basic"/>
	<node name="$(anon vehicle_spawn)" pkg="gazebo_ros" type="spawn_model" output="screen" 
		args="-sdf -file $(arg sdf) -model $(arg model) -x $(arg x) -y $(arg y) -z $(arg z) -R $(arg R) -P $(arg P) -Y $(arg Y)">
	</node>

	<!-- 启动MAVROS -->
	<node pkg="mavros" type="mavros_node" name="mavros" output="screen">
		<param name="fcu_url" value="udp://:14540@localhost:14557" />
		<param name="gcs_url" value="" />
		<param name="target_system_id" value="1" />
		<param name="target_component_id" value="1" />
		<rosparam command="load" file="$(find uavros_gazebo)/config/px4_pluginlists.yaml" />
		<rosparam command="load" file="$(find uavros_gazebo)/config/px4_config.yaml" />
	</node>
	
	<!-- TF transform -->
	<include file="$(find uavros_gazebo)/launch/tf_transform.launch">
		<arg name="x" value="$(arg x)"/>
    	<arg name="y" value="$(arg y)"/>
    	<arg name="z" value="$(arg z)"/>
    </include>

<!--下面的节点不属于uavros_gazebo仿真环境的搭建了，真机也会用到，因此放到真机或仿真任务的launch文件里去 -->
	<!-- 启动Prometheus代码 -->

	<!-- run the px4_pos_estimator.cpp -->	
	<!-- run the px4_pos_controller.cpp -->
	<!-- run the ground_station.cpp -->
	<!-- run the ground_station_msg.cpp -->

</launch>

